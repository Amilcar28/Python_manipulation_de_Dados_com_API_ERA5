# -*- coding: utf-8 -*-
"""Novo_ManipulaTION_dos dados API_ERA5_2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w-3tcbjx0pMJBJ-l7ijPqKm4TpBvqNpX
"""

#Install package library
!pip install pydap
!pip install netCDF4
!pip install cftime
!pip install xarray

# importar as biblioticas de trabalho
import xarray as xr
import netCDF4
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import datetime as dt
import cftime
import matplotlib.dates as mdates

## Acessado os dados do Era5 de termperatura horária de 2m pelo URL
t2m = xr.open_dataset('http://apdrc.soest.hawaii.edu/dods/public_data/Reanalysis_Data/ERA5/hourly/2m_temperature')
pr = xr.open_dataset('http://apdrc.soest.hawaii.edu:80/dods/public_data/Reanalysis_Data/ERA5/hourly/Surface_total_precipitation')
HR = xr.open_dataset('http://apdrc.soest.hawaii.edu:80/dods/public_data/Reanalysis_Data/ERA5/hourly/Specific_humidity_1000mb')
u_wind = xr.open_dataset('http://apdrc.soest.hawaii.edu:80/dods/public_data/Reanalysis_Data/ERA5/hourly/U_wind_component_10m')
v_wind = xr.open_dataset('http://apdrc.soest.hawaii.edu:80/dods/public_data/Reanalysis_Data/ERA5/hourly/V_wind_component_10m')

# Função de Converter as direcões do Ventos do ERA5
def wind_dir(u, v):
    """Compute the wind direction from u and v-components.
    """
    wdir = np.mod(180 + np.rad2deg(np.arctan2(v, u)), 360)
    return wdir

# Função de Converter as Velocidade do Ventos do ERA5
def wind_speed(u, v):
    """Help you to compute the speed."""
    wspeed = np.sqrt(u * u + v * v)
    return wspeed

# Imprimido a variavel de temperatura ERA5
t2m

## Imprimindo a Precipitação total do ERA5
pr

# Imprimido os dados de Humidade especifica ERA5
HR

# Imprimido os dados de Velocidade do vento (v_wind) ERA5.
v_wind

# Imprimido os dados de direcção do vento (u_wind) ERA5.
u_wind

#Selecionar todos parametros os 4 fontes de dados do ERA5
df_pr = pr.sel(lat=(-12.15740000), lon=(18.55522222), method='nearest').sel(time=slice('2024-06-01', '2024-06-30'))
df_t2m = t2m.sel(lat=(-12.15740000), lon=(18.55522222), method='nearest').sel(time=slice('2024-06-01', '2024-06-30'))
df_HR = HR['q'].sel(lat=(-12.15740000), lon=(18.55522222), method='nearest').sel(time=slice('2024-06-01', '2024-06-30'))
df_dir = u_wind['u10'].sel(lat=(-12.15740000), lon=(18.55522222), method='nearest').sel(time=slice('2024-06-01', '2024-06-30'))
df_speed = v_wind['v10'].sel(lat=(-12.15740000), lon=(18.55522222), method='nearest').sel(time=slice('2024-06-01', '2024-06-30'))

#Converter os dados unidades de cada data frame (parametro) unico.
df_pr ['pr'] = df_pr ['tp']*1000
df_t2m ['t2'] = df_t2m ['t2'] - 273.15

# função final que permite importar a direção do vento e velocidade em xarray como função xr.
final_dir = xr . apply_ufunc (wind_dir , df_dir , df_speed , dask='allowed', vectorize=True)
final_speed = xr . apply_ufunc (wind_speed , df_dir , df_speed , dask='allowed', vectorize=True)

"""#Converter os dados de humidade especifica kg/kg para a humidade relativa RH"""

# Converterndo a humidade especifica para a relativa RH kg/kg to %
#q = humidade especifica kg/kg
#RH = q/e
# e_S = Saturation vapor pressure
# e = Vapor pressure

def calcular_RH(umidade, temp):
    import numpy as np
    e_s = 6.112 * np.exp((17.67 * temp) / (temp + 243.5))  # Saturation vapor pressure
    e = 0.622 * e_s /(1013.25 - 0.378 * e_s)  # Vapor pressure
    RH = (umidade / e) * 100 # calculo da humidade relativa

    return RH

"""#Criando o dataframe ou seja visualizar os dados de precipitação ERA5."""

# Criando dataframe
test = calcular_RH(data_era5['Humidade_especifica'].astype(float), data_era5['temperatura'].astype(float))

# Criando um dicionario de dataframe das variaveis de data, temp, humidade especifica, Humidade relativa sem lon e lat.
data_era5 = pd.DataFrame(
          {'data': df_pr.time,
           'temperatura': df_t2m['t2'].values,
           'Humidade_especifica': test.round(1).values,
           'Velocidade_vento': final_speed.values,
           'Direcao_vento': final_dir.values,
           'Precipitação': df_pr['pr'].values,
           })

data_era5

#Diminuir as casas decimais para todas as colunas
data_rounded = data_era5.round(2)
data_rounded

# Salvar os dados dataframe em CSV.
data_era5.to_csv('dadosdejunho2024_AJ.csv', index=False)

